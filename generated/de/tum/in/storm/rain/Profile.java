/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.tum.in.storm.rain;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Profile implements org.apache.thrift.TBase<Profile, Profile._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Profile");

  private static final org.apache.thrift.protocol.TField DEST_TRACK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("destTrackName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("interval", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TRANSITION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("transitionTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfUsers", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField MIX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("mixName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProfileStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProfileTupleSchemeFactory());
  }

  public String destTrackName; // required
  public long interval; // required
  public long transitionTime; // required
  public long numberOfUsers; // required
  public String mixName; // required
  public String name; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEST_TRACK_NAME((short)1, "destTrackName"),
    INTERVAL((short)2, "interval"),
    TRANSITION_TIME((short)3, "transitionTime"),
    NUMBER_OF_USERS((short)4, "numberOfUsers"),
    MIX_NAME((short)5, "mixName"),
    NAME((short)6, "name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEST_TRACK_NAME
          return DEST_TRACK_NAME;
        case 2: // INTERVAL
          return INTERVAL;
        case 3: // TRANSITION_TIME
          return TRANSITION_TIME;
        case 4: // NUMBER_OF_USERS
          return NUMBER_OF_USERS;
        case 5: // MIX_NAME
          return MIX_NAME;
        case 6: // NAME
          return NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INTERVAL_ISSET_ID = 0;
  private static final int __TRANSITIONTIME_ISSET_ID = 1;
  private static final int __NUMBEROFUSERS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEST_TRACK_NAME, new org.apache.thrift.meta_data.FieldMetaData("destTrackName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.TRANSITION_TIME, new org.apache.thrift.meta_data.FieldMetaData("transitionTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.NUMBER_OF_USERS, new org.apache.thrift.meta_data.FieldMetaData("numberOfUsers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.MIX_NAME, new org.apache.thrift.meta_data.FieldMetaData("mixName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Profile.class, metaDataMap);
  }

  public Profile() {
  }

  public Profile(
    String destTrackName,
    long interval,
    long transitionTime,
    long numberOfUsers,
    String mixName,
    String name)
  {
    this();
    this.destTrackName = destTrackName;
    this.interval = interval;
    setIntervalIsSet(true);
    this.transitionTime = transitionTime;
    setTransitionTimeIsSet(true);
    this.numberOfUsers = numberOfUsers;
    setNumberOfUsersIsSet(true);
    this.mixName = mixName;
    this.name = name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Profile(Profile other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDestTrackName()) {
      this.destTrackName = other.destTrackName;
    }
    this.interval = other.interval;
    this.transitionTime = other.transitionTime;
    this.numberOfUsers = other.numberOfUsers;
    if (other.isSetMixName()) {
      this.mixName = other.mixName;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
  }

  public Profile deepCopy() {
    return new Profile(this);
  }

  @Override
  public void clear() {
    this.destTrackName = null;
    setIntervalIsSet(false);
    this.interval = 0;
    setTransitionTimeIsSet(false);
    this.transitionTime = 0;
    setNumberOfUsersIsSet(false);
    this.numberOfUsers = 0;
    this.mixName = null;
    this.name = null;
  }

  public String getDestTrackName() {
    return this.destTrackName;
  }

  public Profile setDestTrackName(String destTrackName) {
    this.destTrackName = destTrackName;
    return this;
  }

  public void unsetDestTrackName() {
    this.destTrackName = null;
  }

  /** Returns true if field destTrackName is set (has been assigned a value) and false otherwise */
  public boolean isSetDestTrackName() {
    return this.destTrackName != null;
  }

  public void setDestTrackNameIsSet(boolean value) {
    if (!value) {
      this.destTrackName = null;
    }
  }

  public long getInterval() {
    return this.interval;
  }

  public Profile setInterval(long interval) {
    this.interval = interval;
    setIntervalIsSet(true);
    return this;
  }

  public void unsetInterval() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  /** Returns true if field interval is set (has been assigned a value) and false otherwise */
  public boolean isSetInterval() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERVAL_ISSET_ID);
  }

  public void setIntervalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERVAL_ISSET_ID, value);
  }

  public long getTransitionTime() {
    return this.transitionTime;
  }

  public Profile setTransitionTime(long transitionTime) {
    this.transitionTime = transitionTime;
    setTransitionTimeIsSet(true);
    return this;
  }

  public void unsetTransitionTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSITIONTIME_ISSET_ID);
  }

  /** Returns true if field transitionTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTransitionTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSITIONTIME_ISSET_ID);
  }

  public void setTransitionTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSITIONTIME_ISSET_ID, value);
  }

  public long getNumberOfUsers() {
    return this.numberOfUsers;
  }

  public Profile setNumberOfUsers(long numberOfUsers) {
    this.numberOfUsers = numberOfUsers;
    setNumberOfUsersIsSet(true);
    return this;
  }

  public void unsetNumberOfUsers() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFUSERS_ISSET_ID);
  }

  /** Returns true if field numberOfUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfUsers() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBEROFUSERS_ISSET_ID);
  }

  public void setNumberOfUsersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBEROFUSERS_ISSET_ID, value);
  }

  public String getMixName() {
    return this.mixName;
  }

  public Profile setMixName(String mixName) {
    this.mixName = mixName;
    return this;
  }

  public void unsetMixName() {
    this.mixName = null;
  }

  /** Returns true if field mixName is set (has been assigned a value) and false otherwise */
  public boolean isSetMixName() {
    return this.mixName != null;
  }

  public void setMixNameIsSet(boolean value) {
    if (!value) {
      this.mixName = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public Profile setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEST_TRACK_NAME:
      if (value == null) {
        unsetDestTrackName();
      } else {
        setDestTrackName((String)value);
      }
      break;

    case INTERVAL:
      if (value == null) {
        unsetInterval();
      } else {
        setInterval((Long)value);
      }
      break;

    case TRANSITION_TIME:
      if (value == null) {
        unsetTransitionTime();
      } else {
        setTransitionTime((Long)value);
      }
      break;

    case NUMBER_OF_USERS:
      if (value == null) {
        unsetNumberOfUsers();
      } else {
        setNumberOfUsers((Long)value);
      }
      break;

    case MIX_NAME:
      if (value == null) {
        unsetMixName();
      } else {
        setMixName((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEST_TRACK_NAME:
      return getDestTrackName();

    case INTERVAL:
      return Long.valueOf(getInterval());

    case TRANSITION_TIME:
      return Long.valueOf(getTransitionTime());

    case NUMBER_OF_USERS:
      return Long.valueOf(getNumberOfUsers());

    case MIX_NAME:
      return getMixName();

    case NAME:
      return getName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEST_TRACK_NAME:
      return isSetDestTrackName();
    case INTERVAL:
      return isSetInterval();
    case TRANSITION_TIME:
      return isSetTransitionTime();
    case NUMBER_OF_USERS:
      return isSetNumberOfUsers();
    case MIX_NAME:
      return isSetMixName();
    case NAME:
      return isSetName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Profile)
      return this.equals((Profile)that);
    return false;
  }

  public boolean equals(Profile that) {
    if (that == null)
      return false;

    boolean this_present_destTrackName = true && this.isSetDestTrackName();
    boolean that_present_destTrackName = true && that.isSetDestTrackName();
    if (this_present_destTrackName || that_present_destTrackName) {
      if (!(this_present_destTrackName && that_present_destTrackName))
        return false;
      if (!this.destTrackName.equals(that.destTrackName))
        return false;
    }

    boolean this_present_interval = true;
    boolean that_present_interval = true;
    if (this_present_interval || that_present_interval) {
      if (!(this_present_interval && that_present_interval))
        return false;
      if (this.interval != that.interval)
        return false;
    }

    boolean this_present_transitionTime = true;
    boolean that_present_transitionTime = true;
    if (this_present_transitionTime || that_present_transitionTime) {
      if (!(this_present_transitionTime && that_present_transitionTime))
        return false;
      if (this.transitionTime != that.transitionTime)
        return false;
    }

    boolean this_present_numberOfUsers = true;
    boolean that_present_numberOfUsers = true;
    if (this_present_numberOfUsers || that_present_numberOfUsers) {
      if (!(this_present_numberOfUsers && that_present_numberOfUsers))
        return false;
      if (this.numberOfUsers != that.numberOfUsers)
        return false;
    }

    boolean this_present_mixName = true && this.isSetMixName();
    boolean that_present_mixName = true && that.isSetMixName();
    if (this_present_mixName || that_present_mixName) {
      if (!(this_present_mixName && that_present_mixName))
        return false;
      if (!this.mixName.equals(that.mixName))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Profile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Profile typedOther = (Profile)other;

    lastComparison = Boolean.valueOf(isSetDestTrackName()).compareTo(typedOther.isSetDestTrackName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestTrackName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destTrackName, typedOther.destTrackName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterval()).compareTo(typedOther.isSetInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interval, typedOther.interval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransitionTime()).compareTo(typedOther.isSetTransitionTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransitionTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transitionTime, typedOther.transitionTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumberOfUsers()).compareTo(typedOther.isSetNumberOfUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfUsers, typedOther.numberOfUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMixName()).compareTo(typedOther.isSetMixName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMixName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mixName, typedOther.mixName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Profile(");
    boolean first = true;

    sb.append("destTrackName:");
    if (this.destTrackName == null) {
      sb.append("null");
    } else {
      sb.append(this.destTrackName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interval:");
    sb.append(this.interval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transitionTime:");
    sb.append(this.transitionTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numberOfUsers:");
    sb.append(this.numberOfUsers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mixName:");
    if (this.mixName == null) {
      sb.append("null");
    } else {
      sb.append(this.mixName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProfileStandardSchemeFactory implements SchemeFactory {
    public ProfileStandardScheme getScheme() {
      return new ProfileStandardScheme();
    }
  }

  private static class ProfileStandardScheme extends StandardScheme<Profile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Profile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEST_TRACK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.destTrackName = iprot.readString();
              struct.setDestTrackNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.interval = iprot.readI64();
              struct.setIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRANSITION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.transitionTime = iprot.readI64();
              struct.setTransitionTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUMBER_OF_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numberOfUsers = iprot.readI64();
              struct.setNumberOfUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MIX_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mixName = iprot.readString();
              struct.setMixNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Profile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.destTrackName != null) {
        oprot.writeFieldBegin(DEST_TRACK_NAME_FIELD_DESC);
        oprot.writeString(struct.destTrackName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
      oprot.writeI64(struct.interval);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRANSITION_TIME_FIELD_DESC);
      oprot.writeI64(struct.transitionTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER_OF_USERS_FIELD_DESC);
      oprot.writeI64(struct.numberOfUsers);
      oprot.writeFieldEnd();
      if (struct.mixName != null) {
        oprot.writeFieldBegin(MIX_NAME_FIELD_DESC);
        oprot.writeString(struct.mixName);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProfileTupleSchemeFactory implements SchemeFactory {
    public ProfileTupleScheme getScheme() {
      return new ProfileTupleScheme();
    }
  }

  private static class ProfileTupleScheme extends TupleScheme<Profile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Profile struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDestTrackName()) {
        optionals.set(0);
      }
      if (struct.isSetInterval()) {
        optionals.set(1);
      }
      if (struct.isSetTransitionTime()) {
        optionals.set(2);
      }
      if (struct.isSetNumberOfUsers()) {
        optionals.set(3);
      }
      if (struct.isSetMixName()) {
        optionals.set(4);
      }
      if (struct.isSetName()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetDestTrackName()) {
        oprot.writeString(struct.destTrackName);
      }
      if (struct.isSetInterval()) {
        oprot.writeI64(struct.interval);
      }
      if (struct.isSetTransitionTime()) {
        oprot.writeI64(struct.transitionTime);
      }
      if (struct.isSetNumberOfUsers()) {
        oprot.writeI64(struct.numberOfUsers);
      }
      if (struct.isSetMixName()) {
        oprot.writeString(struct.mixName);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Profile struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.destTrackName = iprot.readString();
        struct.setDestTrackNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.interval = iprot.readI64();
        struct.setIntervalIsSet(true);
      }
      if (incoming.get(2)) {
        struct.transitionTime = iprot.readI64();
        struct.setTransitionTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.numberOfUsers = iprot.readI64();
        struct.setNumberOfUsersIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mixName = iprot.readString();
        struct.setMixNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
    }
  }

}

